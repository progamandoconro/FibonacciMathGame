{"version":3,"sources":["fibo.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","nValue","nValueHandler","userAnswer","userAnswerHandler","className","value","onChange","e","target","type","alt","image","logo","onClick","n","f","i","correctAnswer","length","toString","alert","fiboHandler","style","padding","src","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yFAAAA,EAAOC,QAAU,IAA0B,kC,uMC+D5BC,MA1Df,WAAgB,IAAD,EAEmBC,mBAAS,KAF5B,mBAENC,EAFM,KAEEC,EAFF,OAG2BF,mBAAS,KAHpC,mBAGNG,EAHM,KAGMC,EAHN,KAkBb,OACE,yBAAKC,UAAU,OACf,yBAAKA,UAAU,cACf,qDACA,2BAEAC,MAAOL,EACPM,SAAU,SAAAC,GAAC,OAAEN,EAAcM,EAAEC,OAAOH,QACpCI,KAAK,WAEL,6BAEA,kBAAC,IAAD,CAAkBL,UAAU,WAAWM,IAAI,OAAOC,MAAOC,MAEzD,4CAEA,2BACAP,MAAOH,EACPI,SAAU,SAAAC,GAAC,OAAEJ,EAAkBI,EAAEC,OAAOH,QACxCI,KAAK,WAGL,6BAEA,4BACAI,QAAS,YAtCS,SAACC,GAEnB,GAAIA,GAAK,EAAG,OAAO,EAEnB,IADA,IAAMC,EAAI,CAAC,EAAG,EAAG,GACTC,EAAI,EAAGA,GAAKF,EAAGE,IACrBD,EAAEC,GAAKD,EAAEC,EAAE,GAAKD,EAAEC,EAAE,GAEtB,IAAMC,EAAgBF,EAAEA,EAAEG,OAAO,GAC7BD,EAAcE,aAAejB,EAAWiB,WAC5CC,MAAM,UAAYH,EAAe,2BAA6BF,EAAEI,YAC3DC,MAAO,8BA6BVC,CAAYrB,KAFd,SAQF,yBAAKsB,MAAO,CAACC,QAAQ,KAAMC,IAAKZ,IAAMR,UAAU,WAAWM,IAAI,SAC/D,oCAAS,uBAAGe,KAAK,wDAAR,yDAAT,OC5CkBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a96ae0db.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/fibo.2f475e22.png\";","import React, {useState,} from 'react';\nimport logo from './fibo.png';\nimport './App.css';\nimport ExampleComponent from 'react-rounded-image'\n\nfunction App() {\n  \n  const [nValue, nValueHandler] = useState(\"3\");\n  const [userAnswer, userAnswerHandler] = useState(\"2\");\n  \n  const fiboHandler = (n)=>{\n    \n    if (n <= 2) return 1;\n    const f = [0, 1, 1];\n    for(let i = 3; i <= n; i++) {\n      f[i] = f[i-1] + f[i-2];\n    }\n    const correctAnswer = f[f.length-1];\n    if (correctAnswer.toString() === userAnswer.toString()) \n    alert('Woowow ' + correctAnswer +\" is correct, genius !!! \" + f.toString());\n    else alert ('Sorry, that is not correct');    \n  };\n  \n  return (\n    <div className=\"App\">\n    <div className=\"App-header\">\n    <h1>Nth. Fibonacci number</h1>\n    <input\n    \n    value={nValue}\n    onChange={e=>nValueHandler(e.target.value)}\n    type='number'\n    ></input>\n    <hr></hr>\n    \n    <ExampleComponent className=\"App-logo\" alt=\"logo\" image={logo} />\n\n    <h1>Your Answer </h1>\n    \n    <input\n    value={userAnswer}\n    onChange={e=>userAnswerHandler(e.target.value)}\n    type=\"number\"\n    \n    ></input>\n    <hr></hr>\n    \n    <button\n    onClick={()=>{\n      fiboHandler(nValue)\n    }\n  }\n  >Send</button>\n\n  </div>\n  <img style={{padding:100}} src={logo} className=\"App-logo\" alt=\"logo\" />\n  <footer> <a href='https://github.com/progamandoconro/FibonacciMathGame'> https://github.com/progamandoconro/FibonacciMathGame</a> </footer>\n  \n\n  </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}