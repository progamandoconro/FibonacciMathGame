{"version":3,"sources":["fibo.png","Header.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","src","logo","className","alt","style","fontFamily","Footer","href","App","useState","nValue","setnValue","answer","setAnswer","value","onChange","e","target","answerOnHandleChange","min","onClick","n","f","i","correctAnswer","length","toString","alert","parseInt","fiboCalculator","slice","map","showTable","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2FAAAA,EAAOC,QAAU,IAA0B,kC,gLCkB5BC,EAfD,WAEV,OACI,6BAGA,yBAAMC,IAAKC,IAAMC,UAAU,kBAAkBC,IAAI,SACjD,wBAAIC,MAAO,CAACC,WAAW,SAAvB,mDCMOC,EAbD,WAEV,OACI,6BACA,gCACA,uBAAGC,KAAK,wDAAR,wDADA,O,MCwESC,MAxEjB,WAAgB,IAAD,EAEeC,mBAAS,KAFxB,mBAENC,EAFM,KAEEC,EAFF,OAGeF,mBAAS,KAHxB,mBAGNG,EAHM,KAGEC,EAHF,KAmCb,OAEE,yBAAKX,UAAU,OACf,kBAAC,EAAD,MACA,yBAAKA,UAAU,YAEf,2CAAiBQ,EAAjB,0BAEA,2BACAR,UAAU,QACVY,MAAOF,EACPG,SAAU,SAAAC,GAAC,OAzBgB,SAAAA,GAE3BH,EAAUG,EAAEC,OAAOH,OAuBNI,CAAqBF,IAElCG,IAAI,MAIJ,4CAEA,4BACAjB,UAAU,SACVkB,QAAS,kBAnDY,SAACC,GACtB,GAAIA,GAAK,EAAG,OAAO,EAEnB,IADA,IAAIC,EAAI,CAAC,EAAG,EAAG,GACPC,EAAI,EAAGA,GAAKF,EAAGE,IACrBD,EAAEC,GAAKD,EAAEC,EAAE,GAAKD,EAAEC,EAAE,GAEtB,IAAIC,EAAgBF,EAAEA,EAAEG,OAAO,GAE3BD,EAAcE,aAAed,EAAOc,YACtCC,MAAM,UAAYH,EAAe,2BAA6BF,EAAEI,WAAa,iCAC7Ef,EAAUiB,SAASlB,GAAQ,IAExBiB,MAAO,8BAuCCE,CAAenB,KAF5B,UAMA,uDACA,2BACAR,UAAU,SADV,IAnCgB,SAACmB,GACjB,GAAIA,GAAK,EAAG,OAAO,EAEnB,IADA,IAAIC,EAAI,CAAC,EAAG,EAAG,GACPC,EAAI,EAAGA,GAAKF,EAAGE,IACrBD,EAAEC,GAAKD,EAAEC,EAAE,GAAKD,EAAEC,EAAE,GAEtB,OAAOD,EAAEQ,MAAM,EAAER,EAAEG,OAAO,GAAGM,KAAI,SAAAf,GAAC,OAAE,4BAAKA,EAAEU,eA+BxCM,CAAUtB,IAGb,kBAAC,EAAD,QC7DgBuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ea614849.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/fibo.2f475e22.png\";","import React from 'react'\nimport logo from './fibo.png';\n\nconst Header =() =>{\n\n    return(\n        <div>\n       \n       \n        <img  src={logo} className=\"App-logo-header\" alt=\"logo\" />\n        <h1 style={{fontFamily:'Math'}}> Fibonacci sequence =  1, 1, 2, 3, 5, 8, ... </h1>\n\n         </div>\n\n    )\n\n};\n\nexport default Header;","import React from 'react'\n\n\nconst Footer =() =>{\n\n    return(\n        <div>\n        <footer> \n        <a href='https://github.com/progamandoconro/FibonacciMathGame'>\n         https://github.com/progamandoconro/FibonacciMathGame</a> </footer>\n         </div>\n\n    )\n\n};\n\nexport default Footer;","import React, {useState,} from 'react';\n\nimport Header from './Header'\nimport Footer from './Footer'\n\nimport './App.css';\n\nfunction App() {\n  \n  const [nValue, setnValue] = useState(\"3\");\n  const [answer, setAnswer] = useState(\"2\");\n  \n  const fiboCalculator = (n)=>{\n    if (n <= 2) return 1;\n    let f = [0, 1, 1];\n    for(let i = 3; i <= n; i++) {\n      f[i] = f[i-1] + f[i-2];\n    }\n    let correctAnswer = f[f.length-1];\n    \n    if (correctAnswer.toString() === answer.toString()) {\n      alert('Woowow ' + correctAnswer +\" is correct, genius !!! \" + f.toString() + \" A new level is now available\");\n      setnValue(parseInt(nValue)+1);\n    }\n    else alert ('Sorry, that is not correct');  \n    \n  };\n  \n  const answerOnHandleChange = e => {\n    \n    setAnswer(e.target.value);\n  };\n  \n  const showTable = (n)=> {\n    if (n <= 2) return 1;\n    let f = [0, 1, 1];\n    for(let i = 3; i <= n; i++) {\n      f[i] = f[i-1] + f[i-2];\n    }\n    return f.slice(1,f.length-2).map(e=><li>{e.toString()}</li>)\n  };\n\n  return (\n    \n    <div className=\"App\">\n    <Header/>\n    <div className=\"App-body\">\n    \n    <h1>What is the {nValue}th. Fibonacci number? </h1>\n    \n    <input\n    className='field'\n    value={answer}\n    onChange={e=>answerOnHandleChange(e)}      \n    \n    min='2'\n    \n    ></input>\n    \n    <h1>Your Answer </h1>\n    \n    <button\n    className='button'\n    onClick={()=>fiboCalculator(nValue)}\n    > Send\n    </button>\n    </div>\n    <h1> Your Fibonacci Points </h1>\n    <table\n    className='Table'\n    > {showTable(nValue)} \n    </table>\n    \n    <Footer/>\n    </div>\n    \n    );\n  }\n  \n  export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}